AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation template DLE_Instance_Host: Creates a single EC2 instance based on Database Lab Engine (DLE) AMI,
  configures DLE, launches the data retrieval process, eventually making it possible to create thin clones using DLE API, CLI, or UI.
  You will be billed for the AWS resources used if you create a stack from this template.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Amazon EC2 configuration"
        Parameters:
          - InstanceType
          - ZFSVolumeSize
          - SSHLocation
          - VPC
          - Subnet
          - KeyName
      - Label:
          default: "TLS certificate configuration"
        Parameters:
          - CertificateSubdomain
          - CertificateHostedZone
          - CertificateEmail
      -
        Label:
          default: "Database Lab Engine (DLE) configuration"
        Parameters:
          - DLERetrievalRefreshTimetable
          - PostgresDumpParallelJobs
          - DLEVerificationToken
          - DLEDebugMode
      -
        Label:
          default: "Source PostgreSQL parameters"
        Parameters:
          - SourceDatabaseSize
          - SourcePostgresHost
          - SourcePostgresPort
          - SourcePostgresUsername
          - SourcePostgresPassword
          - SourcePostgresDBName
          - PostgresConfigSharedPreloadLibraries
          - SourcePostgresDBList
      -
        Label:
          default: "Advanced DLE configuration"
        Parameters:
           - PostgresDockerImage
           - DLEZFSDataSetsNumber
    ParameterLabels:
      KeyName:
        default: "Key pair"
      InstanceType:
        default: "Instance type"
      SSHLocation:
        default: "Connection source IP range"
      SourceDatabaseSize:
        default: "Total source database size in GiB"
      CertificateSubdomain:
        default: "Certificate subdomain"
      CertificateHostedZone:
        default: "Hosted zone"
      CertificateEmail:
        default: "Certificate email"
      DLEDebugMode:
        default: "DLE debug mode"
      DLEVerificationToken:
        default: "DLE verification token"
      DLERetrievalRefreshTimetable:
        default: "DLE retrieval refresh timetable"
      PostgresDockerImage:
        default: "Postgres docker image"
      DLEZFSDataSetsNumber:
        default: "Number of supported snapshots."
      PostgresDumpParallelJobs:
        default: "Number of pg_dump jobs"
      SourcePostgresDBName:
        default: "Database name"
      VPC:
        default: "VPC security group"
      Subnet:
        default: "Subnet"
      SourcePostgresHost:
        default: "Host name or IP"
      SourcePostgresPort:
        default: "Port"
      SourcePostgresUsername:
        default: "User name"
      SourcePostgresPassword:
        default: "Password"
      PostgresConfigSharedPreloadLibraries:
        default: "shared_preload_libraries parameter"
      SourcePostgresDBList:
        default: "Comma separated list of databases to copy"
Parameters:
  Subnet:
    Description: Subnet to attach EC2 machine.
    Type: AWS::EC2::Subnet::Id
  VPC:
    Description: VPC to attach EC2 machine.
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: Can contain only ASCII characters and can not be empty.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Can contain only ASCII characters and can not be empty.
  InstanceType:
    Description: DLE EC2 instance type
    Type: String
    Default: m5.4xlarge
    AllowedValues:
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r5.12xlarge
      - r5.16xlarge
      - r5.24xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: CIDR in format x.x.x.x/32 to allow one specific IP address access, 0.0.0.0/0 to allow all IP addresses access, or another CIDR range
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  SourceDatabaseSize:
    Description: The size of the source databases used to calculate the size of EBS volume, in GiB
    Type: Number
    Default: 40
  CertificateSubdomain:
    Description: Subdomain to obtain a TLS certificate for (for example, dle). Leave it empty if you don't need SSL connection or don't have Route 53 hosted zone.
    Type: String
  CertificateHostedZone:
    Description: Hosted zone to obtain a TLS certificate for (for example, example.com). Leave it empty if you don't need SSL connection or don't have Route 53 hosted zone.
    Type: String
  CertificateEmail:
    Description: Email address for important account notifications about the issued TLS certificate. Leave it empty if you don't need SSL connection or don't have Route 53 hosted zone.
    Type: String
    AllowedPattern: '^$|[^\s@]+@[^\s@]+\.[^\s@]+'
    Default: ''
    ConstraintDescription: Must be a valid email of the form \'user@example.com\'
  DLEDebugMode:
    Description: Enables DLE debug mode
    Type: String
    Default: True
    AllowedValues:
      - True
      - False
  DLEVerificationToken:
    Description: DLE verification token
    Type: String
    Default: "example-verification-token"
    MinLength: '9'
    MaxLength: '32'
  DLERetrievalRefreshTimetable:
    Description: DLE refresh schedule on cron format
    Type: String
    Default: '0 0 * * *'
  DLEZFSDataSetsNumber:
    Description: Number of database copies needed
    Type: Number
    Default: 2
    MinValue: 2
    MaxValue: 100
  PostgresDockerImage:
    Description: Docker image to run PostgreSQL
    Type: String
    Default: 'postgresai/extended-postgres:14'
  SourcePostgresDBName:
    Description: Source database name. This parameter is used to connect to the database
    Type: String
    Default: 'postgres'
  SourcePostgresHost:
    Description: Source Postgres cluster host name or IP
    Type: String
    Default: ''
  SourcePostgresPort:
    Description: Source Postgres cluster port
    Type: Number
    MinValue: 1024
    MaxValue: 65535
    Default: 5432
  SourcePostgresUsername:
    Description: Source Postgres cluster username
    Type: String
    Default: postgres
  SourcePostgresPassword:
    Description: Source Postgres cluster password
    Type: String
    Default: ''
    NoEcho: true
  PostgresConfigSharedPreloadLibraries:
    Description: Source Postgres shared_preload_libraries value
    Type: String
    Default: ''
  PostgresDumpParallelJobs:
    Description: Number of jobs to run pg_dump against the source database
    Type: String
    Default: '1'
  SourcePostgresDBList:
    Description: List of database names on source for copy to DLE. Leave it empty to copy all accessible databases
    Type: String
    Default: ''
Mappings:
  AWSInstanceType2Arch:
    r5.large:
      Arch: HVM64
    r5.xlarge:
      Arch: HVM64
    r5.2xlarge:
      Arch: HVM64
    r5.4xlarge:
      Arch: HVM64
    r5.8xlarge:
      Arch: HVM64
    r5.12xlarge:
      Arch: HVM64
    r5.16xlarge:
      Arch: HVM64
    r5.24xlarge:
      Arch: HVM64
    m5.large:
      Arch: HVM64
    m5.xlarge:
      Arch: HVM64
    m5.2xlarge:
      Arch: HVM64
    m5.4xlarge:
      Arch: HVM64
    m5.8xlarge:
      Arch: HVM64
    m5.12xlarge:
      Arch: HVM64
    m5.16xlarge:
      Arch: HVM64
    m5.24xlarge:
      Arch: HVM64
    t3.nano:
      Arch: HVM64
    t3.micro:
      Arch: HVM64
    t3.small:
      Arch: HVM64
    t3.medium:
      Arch: HVM64
    t3.large:
      Arch: HVM64
    t3.xlarge:
      Arch: HVM64
    t3.2xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    eu-north-1:
      HVM64: ami-0665ae2cfbd4e342d
    ap-south-1:
      HVM64: ami-0e374efc30e300f09
    eu-west-3:
      HVM64: ami-0efda6ea87e5c4d96
    eu-west-2:
      HVM64: ami-0687cbc11ebc16691
    eu-west-1:
      HVM64: ami-0d50368f3e8f1ccc0
    ap-northeast-3:
      HVM64: ami-0e65633c1b72de22f
    ap-northeast-2:
      HVM64: ami-02f4e02a76c68579d
    ap-northeast-1:
      HVM64: ami-04603eedf1f55b4cb
    sa-east-1:
      HVM64: ami-05267d11294fbeb12
    ca-central-1:
      HVM64: ami-0504c9f745022749a
    ap-southeast-1:
      HVM64: ami-0fdf327ea5e077df4
    ap-southeast-2:
      HVM64: ami-01e5c77c1fbc46669
    eu-central-1:
      HVM64: ami-0793f98b004f79c42
    us-east-1:
      HVM64: ami-07ed8ca1867e9803a
    us-east-2:
      HVM64: ami-042693a1c63d12800
    us-west-1:
      HVM64: ami-0484ba45ecb22a99e
    us-west-2:
      HVM64: ami-04859f68862a8bcfd
Conditions:
  CreateSubDomain:
    !Not [!Equals [!Ref CertificateHostedZone, '']]

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  PowerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          var response = require('cfn-response');
          exports.handler = function(event, context) {
            var result = parseInt(event.ResourceProperties.Op1)*(parseInt(event.ResourceProperties.Op2)+2);
            response.send(event, context, response.SUCCESS, {Value: result});
          };
      Runtime: nodejs14.x
  SizeCalculate:
    Type: Custom::Power
    Properties:
      ServiceToken: !GetAtt PowerFunction.Arn
      Op1: !Ref SourceDatabaseSize
      Op2: !Ref DLEZFSDataSetsNumber

  ZFSVolume:
    Type: AWS::EC2::Volume
    DeletionPolicy: Snapshot
    Properties:
      Encrypted: True
      AvailabilityZone: !GetAtt DLEInstance.AvailabilityZone
      Size: !GetAtt SizeCalculate.Value
      Tags:
        -
          Key: Name
          Value: dle-zfs-volume
      VolumeType: gp2

  DLEInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      SecurityGroupIds: !If
        - CreateSubDomain
        - - !GetAtt DLESecurityGroup.GroupId
          - !GetAtt DLEUISecurityGroup.GroupId
        - - !GetAtt DLESecurityGroup.GroupId
      KeyName: !Ref KeyName
      SubnetId: !Ref Subnet
      Tags:
        -
          Key: Name
          Value: "DLE Instance"
      UserData:
        Fn::Base64: !Sub |     # No more Fn::Join needed
          #!/bin/bash
          set -ex

          sleep 30

          # This code tested and works on Ubuntu 20.04 (current base AMI)
          disk=$(lsblk -e7 --output PATH,NAME,FSTYPE  --json | jq -r '.blockdevices[] | select(.children == null and .fstype == null) | .path ')

          sudo zpool create -f \
            -O compression=on \
            -O atime=off \
            -O recordsize=128k \
            -O logbias=throughput \
            -m /var/lib/dblab/dblab_pool \
            dblab_pool \
            $disk

          for i in {1..${DLEZFSDataSetsNumber}}; do
            sudo zfs create dblab_pool/dataset_$i
          done

          dle_config_path="/home/ubuntu/.dblab/engine/configs"
          dle_meta_path="/home/ubuntu/.dblab/engine/meta"
          postgres_conf_path="/home/ubuntu/.dblab/postgres_conf"

          yq e -i '
          .global.debug=${DLEDebugMode} |
          .embeddedUI.host="" |
          .server.verificationToken="${DLEVerificationToken}" |
          .retrieval.refresh.timetable="${DLERetrievalRefreshTimetable}" |
          .retrieval.spec.logicalRestore.options.forceInit=true |
          .poolManager.mountDir = "/var/lib/dblab/dblab_pool" |
          .retrieval.spec.logicalDump.options.dumpLocation="/var/lib/dblab/dblab_pool/dataset_1/dump/" |
          .retrieval.spec.logicalRestore.options.dumpLocation="/var/lib/dblab/dblab_pool/dataset_1/dump/" |
          .databaseContainer.dockerImage="${PostgresDockerImage}" |
          .databaseConfigs.configs.shared_preload_libraries="${PostgresConfigSharedPreloadLibraries}"
          ' $dle_config_path/server.yml

          yq e -i '
          .retrieval.spec.logicalDump.options.source.connection.host = "${SourcePostgresHost}" |
          .retrieval.spec.logicalDump.options.source.connection.port = ${SourcePostgresPort} |
          .retrieval.spec.logicalDump.options.source.connection.dbname="${SourcePostgresDBName}" |
          .retrieval.spec.logicalDump.options.source.connection.username = "${SourcePostgresUsername}" |
          .retrieval.spec.logicalDump.options.source.connection.password = "${SourcePostgresPassword}" |
          .retrieval.spec.logicalDump.options.parallelJobs = ${PostgresDumpParallelJobs} |
          .retrieval.spec.logicalRestore.options.configs.shared_preload_libraries = "${PostgresConfigSharedPreloadLibraries}"
          ' $dle_config_path/server.yml

          for i in $(echo ${SourcePostgresDBList} | sed "s/,/ /g")
          do
            yq e -i "
            .retrieval.spec.logicalDump.options.databases.$i = {}
            " $dle_config_path/server.yml
          done


          sudo docker run \
            --detach \
            --name dblab_server \
            --label dblab_control \
            --privileged \
            --publish 2345:2345 \
            --volume /var/run/docker.sock:/var/run/docker.sock \
            --volume /var/lib/dblab:/var/lib/dblab/:rshared \
            --volume /var/lib/dblab/dblab_pool/dataset_1/dump/:/var/lib/dblab/dblab_pool/dataset_1/dump/:rshared \
            --volume $dle_config_path:/home/dblab/configs:ro \
            --volume $dle_meta_path:/home/dblab/meta \
            --volume $postgres_conf_path:/home/dblab/standard/postgres/control \
            --env DOCKER_API_VERSION=1.39 \
            --restart always \
            registry.gitlab.com/postgres-ai/database-lab/dblab-server:$DLE_DOCKER_IMAGE_VERSION

          if [ ! -z "${CertificateHostedZone}" ]; then
            export DOMAIN=${CertificateSubdomain}.${CertificateHostedZone}
            export USER_EMAIL=${CertificateEmail}
            export CERTIFICATE_EMAIL=${!USER_EMAIL:-'noreply@'$DOMAIN}

            sudo certbot certonly --standalone -d $DOMAIN -m $CERTIFICATE_EMAIL --agree-tos -n
            sudo cp /etc/letsencrypt/live/$DOMAIN/fullchain.pem /etc/envoy/certs/fullchain1.pem
            sudo cp /etc/letsencrypt/live/$DOMAIN/privkey.pem /etc/envoy/certs/privkey1.pem

          cat <<EOF > /etc/letsencrypt/renewal-hooks/deploy/envoy.deploy
          #!/bin/bash
          umask 0177
          export DOMAIN=${CertificateSubdomain}.${CertificateHostedZone}
          export DATA_DIR=/etc/envoy/certs/
          cp /etc/letsencrypt/live/$DOMAIN/fullchain.pem $DATA_DIR/fullchain1.pem
          cp /etc/letsencrypt/live/$DOMAIN/privkey.pem   $DATA_DIR/privkey1.pem
          EOF
            sudo chmod +x /etc/letsencrypt/renewal-hooks/deploy/envoy.deploy

            sudo systemctl enable envoy
            sudo systemctl start envoy
          fi

  MountPoint:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref DLEInstance
      VolumeId: !Ref ZFSVolume
      Device: /dev/xvdh

  DLEElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref DLEInstance

  SubDomain:
    Type: AWS::Route53::RecordSet
    Condition: CreateSubDomain
    Properties:
      HostedZoneName: !Sub '${CertificateHostedZone}.'
      Comment: DNS name for DLE instance.
      Name: !Sub '${CertificateSubdomain}.${CertificateHostedZone}'
      Type: CNAME
      TTL: 60
      ResourceRecords:
        - !GetAtt DLEInstance.PublicDnsName
    DependsOn:
      - DLEInstance
      - DLEElasticIP

  DLESecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable ssh access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref VPC

  DLEUISecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Condition: CreateSubDomain
    Properties:
      GroupDescription: Enable ports to access DLE UI
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SSHLocation

        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref SSHLocation

        - IpProtocol: tcp
          FromPort: 446
          ToPort: 446
          CidrIp: !Ref SSHLocation
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref VPC

Outputs:
  VerificationToken:
    Description: 'DLE verification token'
    Value: !Ref DLEVerificationToken

  DLE:
    Description: URL for newly created DLE instance
    Value: !Sub 'https://${CertificateSubdomain}.${CertificateHostedZone}'
    Condition: CreateSubDomain

  UI:
    Description: UI URL with a domain for newly created DLE instance
    Value: !Sub 'https://${CertificateSubdomain}.${CertificateHostedZone}:446'
    Condition: CreateSubDomain

  EBSVolume:
    Description: Size of provisioned EBS volume
    Value: !GetAtt SizeCalculate.Value

  DNSName:
    Description: Public DNS name
    Value: !GetAtt DLEInstance.PublicDnsName

  EC2SSH:
    Description: SSH connection to the EC2 instance with Database Lab Engine
    Value: !Sub
      - 'ssh -i YOUR_PRIVATE_KEY ubuntu@${DNSName}'
      - DNSName: !GetAtt DLEInstance.PublicDnsName

  DLETunnel:
    Description: Create an SSH-tunnel to Database Lab Engine
    Value: !Sub
      - 'ssh -N -L 2345:${DNSName}:2345 -i YOUR_PRIVATE_KEY ubuntu@${DNSName}'
      - DNSName: !GetAtt DLEInstance.PublicDnsName

  UITunnel:
    Description: Create an SSH-tunnel to Database Lab UI
    Value: !Sub
      - 'ssh -N -L 2346:${DNSName}:2346 -i YOUR_PRIVATE_KEY ubuntu@${DNSName}'
      - DNSName: !GetAtt DLEInstance.PublicDnsName

  CloneTunnel:
    Description: Create an SSH-tunnel to Database Lab clones
    Value: !Sub
      - 'ssh -N -L CLONE_PORT:${DNSName}:CLONE_PORT -i YOUR_PRIVATE_KEY ubuntu@${DNSName}'
      - DNSName: !GetAtt DLEInstance.PublicDnsName

