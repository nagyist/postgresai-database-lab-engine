image: golang:1.17

include:
  - template: Security/SAST.gitlab-ci.yml

variables:
  SAST_EXCLUDED_ANALYZERS: "semgrep-sast"
  DOCKER_DRIVER: overlay2

stages:
  - test
  - build-binary
  - build-image
  - integration-test

test:
  stage: test
  script:
    - make test

lint:
  stage: test
  script:
    - make lint

.only_var_template: &only_tag_release
  only:
    variables:
      - $CI_COMMIT_TAG =~ /^v[0-9.]+$/

.only_var_template: &only_tag_rc
  only:
    variables:
      - $CI_COMMIT_TAG =~ /^v[0-9.]+[\-_]*[a-zA-Z]+[a-zA-Z0-9.\-_]*[a-zA-Z0-9]+$/

.only_var_template: &only_master
  only:
    - master

.only_var_template: &only_feature
  only:
    refs:
      - branches
    variables:
      - $CI_COMMIT_REF_SLUG != "master"

build-binary-alpine:
  image: golang:1.17-alpine
  stage: build-binary
  only:
    refs:
      - branches
      - tags
  artifacts:
    paths:
      - bin
  script:
    - apk add --update --no-cache make git
    - make build

build-binary-client-dev:
  <<: *only_feature
  stage: build-binary
  artifacts:
    paths:
      - bin
  script:
    - make build-client

build-binary-client-master:
  <<: *only_master
  stage: build-binary
  script:
    - make build-client

    # Install google-cloud-sdk.
    - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    - apt-get update && apt-get install -y google-cloud-sdk

    # Authenticate.
    - echo $GCP_SERVICE_KEY | gcloud auth activate-service-account --key-file=-

    # Upload artifacts.
    - gsutil -m cp -r bin/cli/* gs://database-lab-cli/master/

build-binary-client:
  <<: *only_tag_release
  stage: build-binary
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
  script:
    - make build-client

    # Install google-cloud-sdk.
    - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    - apt-get update && apt-get install -y google-cloud-sdk

    # Authenticate.
    - echo $GCP_SERVICE_KEY | gcloud auth activate-service-account --key-file=-

    # Upload artifacts.
    - gsutil -m cp -r bin/cli/* gs://database-lab-cli/${CLEAN_TAG}/
    - gsutil -m cp -r bin/cli/* gs://database-lab-cli/latest/

build-binary-client-rc:
  <<: *only_tag_rc
  stage: build-binary
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
  script:
    - make build-client

    # Install google-cloud-sdk.
    - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    - apt-get update && apt-get install -y google-cloud-sdk

    # Authenticate.
    - echo $GCP_SERVICE_KEY | gcloud auth activate-service-account --key-file=-

    # Upload artifacts.
    - gsutil -m cp -r bin/cli/* gs://database-lab-cli/${CLEAN_TAG}/

.job_template: &build_image_definition
  image: docker:20
  stage: build-image
  artifacts:
    paths:
      - bin
  services:
    - name: docker:dind
  script:
    - apk update && apk upgrade && apk add --no-cache bash # TODO(anatoly): Remove dependency.
    - bash ./scripts/ci_docker_build_push.sh

build-image-feature-server:
  <<: *build_image_definition
  <<: *only_feature
  variables:
    REGISTRY_USER: "${CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
    REGISTRY: "${CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-server"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-server"
    TAGS: "${DOCKER_NAME}:${CI_COMMIT_REF_SLUG}"

build-image-feature-ci-checker:
  <<: *build_image_definition
  <<: *only_feature
  variables:
    REGISTRY_USER: "${CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
    REGISTRY: "${CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.ci-checker"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-ci-checker"
    TAGS: "${DOCKER_NAME}:${CI_COMMIT_REF_SLUG}"

build-image-feature-client:
  <<: *build_image_definition
  <<: *only_feature
  variables:
    REGISTRY_USER: "${CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
    REGISTRY: "${CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-cli"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-cli"
    TAGS: "${DOCKER_NAME}:${CI_COMMIT_REF_SLUG}"

build-image-master-server:
  <<: *build_image_definition
  <<: *only_master
  variables:
    DOCKER_FILE: "Dockerfile.dblab-server"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-server"
    TAGS: "${DOCKER_NAME}:master,${DOCKER_NAME}:master-${CI_COMMIT_SHORT_SHA}"

build-image-master-ci-checker:
  <<: *build_image_definition
  <<: *only_master
  variables:
    DOCKER_FILE: "Dockerfile.ci-checker"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-ci-checker"
    TAGS: "${DOCKER_NAME}:master,${DOCKER_NAME}:master-${CI_COMMIT_SHORT_SHA}"

build-image-master-client:
  <<: *build_image_definition
  <<: *only_master
  variables:
    DOCKER_FILE: "Dockerfile.dblab-cli"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-cli"
    TAGS: "${DOCKER_NAME}:master,${DOCKER_NAME}:master-${CI_COMMIT_SHORT_SHA}"

build-image-latest-server:
  <<: *build_image_definition
  <<: *only_tag_release
  variables:
    REGISTRY_USER: "${DH_CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${DH_CI_REGISTRY_PASSWORD}"
    REGISTRY: "${DH_CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-server"
    DOCKER_NAME: "postgresai/dblab-server"
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export LATEST_TAG=$(echo ${CLEAN_TAG%.*}-latest)
    - export TAGS="${DOCKER_NAME}:${LATEST_TAG},${DOCKER_NAME}:${CLEAN_TAG}"

build-image-latest-server-dev:
  <<: *build_image_definition
  <<: *only_tag_release
  variables:
    REGISTRY_USER: "${CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
    REGISTRY: "${CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-server"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-server"
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export TAGS="${DOCKER_NAME}:${CLEAN_TAG}"

build-image-latest-ci-checker:
  <<: *build_image_definition
  <<: *only_tag_release
  variables:
    REGISTRY_USER: "${DH_CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${DH_CI_REGISTRY_PASSWORD}"
    REGISTRY: "${DH_CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.ci-checker"
    DOCKER_NAME: "postgresai/dblab-ci-checker"
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export LATEST_TAG=$(echo ${CLEAN_TAG%.*}-latest)
    - export TAGS="${DOCKER_NAME}:${LATEST_TAG},${DOCKER_NAME}:${CLEAN_TAG}"

build-image-latest-ci-checker-dev:
  <<: *build_image_definition
  <<: *only_tag_release
  variables:
    REGISTRY_USER: "${CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
    REGISTRY: "${CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.ci-checker"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-ci-checker"
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export TAGS="${DOCKER_NAME}:${CLEAN_TAG}"

build-image-latest-client:
  <<: *build_image_definition
  <<: *only_tag_release
  variables:
    REGISTRY_USER: "${DH_CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${DH_CI_REGISTRY_PASSWORD}"
    REGISTRY: "${DH_CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-cli"
    DOCKER_NAME: "postgresai/dblab"
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export LATEST_TAG=$(echo ${CLEAN_TAG%.*}-latest)
    - export TAGS="${DOCKER_NAME}:${LATEST_TAG},${DOCKER_NAME}:${CLEAN_TAG}"

build-image-rc-server:
  <<: *build_image_definition
  <<: *only_tag_rc
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
  variables:
    REGISTRY_USER: "${DH_CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${DH_CI_REGISTRY_PASSWORD}"
    REGISTRY: "${DH_CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-server"
    DOCKER_NAME: "postgresai/dblab-server"
    TAGS: "${DOCKER_NAME}:${CLEAN_TAG}"

build-image-rc-server-dev:
  <<: *build_image_definition
  <<: *only_tag_rc
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
  variables:
    REGISTRY_USER: "${CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
    REGISTRY: "${CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-server"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-server"
    TAGS: "${DOCKER_NAME}:${CLEAN_TAG}"

build-image-rc-ci-checker:
  <<: *build_image_definition
  <<: *only_tag_rc
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
  variables:
    REGISTRY_USER: "${DH_CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${DH_CI_REGISTRY_PASSWORD}"
    REGISTRY: "${DH_CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.ci-checker"
    DOCKER_NAME: "postgresai/dblab-ci-checker"
    TAGS: "${DOCKER_NAME}:${CLEAN_TAG}"

build-image-rc-ci-checker-dev:
  <<: *build_image_definition
  <<: *only_tag_rc
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
  variables:
    REGISTRY_USER: "${CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
    REGISTRY: "${CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.ci-checker"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-ci-checker"
    TAGS: "${DOCKER_NAME}:${CLEAN_TAG}"

build-image-rc-client:
  <<: *build_image_definition
  <<: *only_tag_rc
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
  variables:
    REGISTRY_USER: "${DH_CI_REGISTRY_USER}"
    REGISTRY_PASSWORD: "${DH_CI_REGISTRY_PASSWORD}"
    REGISTRY: "${DH_CI_REGISTRY}"
    DOCKER_FILE: "Dockerfile.dblab-cli"
    DOCKER_NAME: "postgresai/dblab"
    TAGS: "${DOCKER_NAME}:${CLEAN_TAG}"

build-image-swagger-latest:
  <<: *build_image_definition
  <<: *only_tag_release
  variables:
    DOCKER_FILE: "Dockerfile.swagger-ui"
    DOCKER_NAME: "registry.gitlab.com/postgres-ai/database-lab/dblab-swagger-ui"
  before_script:
    - export CLEAN_TAG=$(echo ${CI_COMMIT_TAG#"v"})
    - export LATEST_TAG=$(echo ${CLEAN_TAG%.*}-latest)
    - export TAGS="${DOCKER_NAME}:${LATEST_TAG}"


.bash-test: &bash_test
  <<: *only_feature
  stage: integration-test
  variables:
    IMAGE_TAG: "${CI_COMMIT_REF_SLUG}"
  script:
    - bash test/1.synthetic.sh
    - bash test/2.logical_generic.sh
    - bash test/4.physical_basebackup.sh
  after_script:
    - bash test/_cleanup.sh
  tags:
    - dle-test

bash-test-9-6:
  <<: *bash_test
  variables:
    POSTGRES_VERSION: "9.6"

bash-test-10:
  <<: *bash_test
  variables:
    POSTGRES_VERSION: 10

bash-test-11:
  <<: *bash_test
  variables:
    POSTGRES_VERSION: 11

bash-test-12:
  <<: *bash_test
  variables:
    POSTGRES_VERSION: 12

bash-test-13:
  <<: *bash_test
  variables:
    POSTGRES_VERSION: 13

bash-test-14:
  <<: *bash_test
  variables:
    POSTGRES_VERSION: 14

integration-test:
  services:
    - name: docker:dind
      command: [ "--tls=false" ]
  <<: *only_feature
  stage: integration-test
  variables:
    # Instruct Testcontainers to use the daemon of DinD.
    DOCKER_HOST: "tcp://docker:2375"
    # Instruct Docker not to start over TLS.
    DOCKER_TLS_CERTDIR: ""
    # Improve performance with overlayfs.
    DOCKER_DRIVER: overlay2
    # Maximum supported API version is 1.41 for the current image
    DOCKER_API_VERSION: "1.41"
  script:
    - make test-ci-integration
